define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/timeline",["jquery","underscore","backbone","models/map/layer/timeline/item"],function(e,n,i,t){"use strict";var l=i.Collection.extend({model:t});return l});
define("controls/L.Control.Timeline",["leaflet","d3"],function(t,i){return t.Control.Timeline?t:(t.Control.Timeline=t.Control.extend({options:{orientation:"left",height:500,width:100,margin:{left:3,right:3,top:10,bottom:5},collapsed:!0,item:{minHeight:1},on:null,title:"Timeline",position:"topleft"},initialize:function(i,e,n){var o=this;t.Util.setOptions(this,n),this._map=i,this._source=e;var l=this._container=t.DomUtil.create("div","leaflet-control-timeline leaflet-control");if(this.options.collapsed){t.DomUtil.addClass(l,"leaflet-control-timeline-collapsed");var s=this._toggle=t.DomUtil.create("a","leaflet-control-timeline-toggle",l);s.title=this.options.title,s.link="#";var a=function(){o._expand()};t.Browser.touch?t.DomEvent.on(s,"click",t.DomEvent.stop).on(s,"click",a,this):t.DomEvent.on(s,"click",a)}else t.DomUtil.addClass(l,"leaflet-control-timeline-expanded");return t.Browser.touch?t.DomEvent.on(this._container,"click",t.DomEvent.stopPropagation):t.DomEvent.disableClickPropagation(this._container),l},onRemove:function(){},onAdd:function(t){return this._container},_expand:function(){var e=this;if(!e._expanded&&(e._expanded=!0,this._map.on("click",this._collapse,this),t.DomUtil.removeClass(this._container,"leaflet-control-timeline-collapsed"),t.DomUtil.addClass(this._container,"leaflet-control-timeline-expanded"),!this._timeline)){var n=this.options.height-this.options.margin.top-this.options.margin.bottom,o=this.options.width-this.options.margin.right-this.options.margin.left,l=(this._xScale=i.scale.linear().range([0,o]),this._yScale=i.scale.linear().domain([this._source.start,this._source.end]).range([0,n])),s=this._timeline=i.select(".leaflet-control-timeline").append("svg").attr("id","timeline").attr("height",this.options.height).attr("width",this.options.width),a=s.append("g").attr("id","band").attr("width",o/2-this.options.margin.right).attr("height",n).attr("transform","translate("+.25*o+","+this.options.margin.top+") scale(.75 1.0)"),r=(a.selectAll("g").data(this._source.getItems()).enter().append("rect").attr("class","timeline-item").attr("height",function(t){return i.max([e.options.item.minHeight,l(t.duration())])}).attr("width",o).attr("transform",function(t){return"translate(0, "+l(t.start)+")"}),this._brush=i.svg.brush().y(l).on("brushend",function(){var t=l(r.extent()[0]),n=l(r.extent()[1]),o={clear:!1,selected:[]};t!==n?i.select("#band").selectAll("rect.timeline-item").each(function(i){l(i.start)<=n&&l(i.end)>=t&&o.selected.push(i)}):o.clear=!0,e.options.on.brushend(o)})),c=a.append("svg").attr("id","brush").call(r);c.selectAll("rect").attr("width",o);var h=s.append("g").attr("id","axis").attr("transform","translate("+(.25*o-this.options.margin.left)+","+this.options.margin.top+")"),p=i.svg.axis().scale(l).orient(this.options.orientation).tickSize(6,0).tickValues(this._source.tickValues()).tickFormat(function(t){return e._source.tickFormat(t)});h.call(p)}},_collapse:function(){this._expanded&&((this.options.on.collapse||"function"==typeof this.options.on.collapse)&&this.options.on.collapse(),this._expanded=!1,t.DomUtil.addClass(this._container,"leaflet-control-timeline-collapsed"),t.DomUtil.removeClass(this._container,"leaflet-control-timeline-expanded"),this._map.off("click",this._collapse,this))}}),void(t.control.timeline=function(i,e,n){return new t.Control.Timeline(i,e,n)}))});
define("controllers/issue",["jquery","underscore","backbone","controllers/prototype","mixins/asyncInit","views/issue","models/issue"],function(e,n,i,o,r,t,l){"use strict";var c=o.extend({model:null,view:null,router:null,initialize:function(i){var o=this;o.$def=e.Deferred(),o.router=i.router,o.model=new l({config:i.config}),o.view=new t({model:o.model,config:i.config}),o.view.render(),o.model.init().done(function(){n.forEach(o.model.get("collection").models,function(e){o.listenTo(e,"active",function(e){var n="article/"+e.get("articleid");o.router.navigate(n,{trigger:!0}),o.view.renderArticle(e)})}),o.$def.resolve(o)}).always(function(){o.$def.reject()})}});return n.extend(c.prototype,r),c});
define("controllers/map",["jquery","underscore","backbone","controllers/prototype","models/map","views/map","mixins/asyncInit","controllers/map/pan","controllers/map/layer"],function(e,o,r,n,a,p,i,t,l,u){"use strict";var s=n.extend({model:null,view:null,issue:null,config:null,mapPanController:null,MapLayerController:null,mapTimelineController:null,initialize:function(o){var r=this;r.$def=e.Deferred(),r.config=o.config,r.router=o.router,r.issue=o.issue,r.model=new a(o),r.view=new p({model:r.model,router:r.router,issue:r.issue}),r.view.init().done(function(){r.mapPanController=new t({map:r.view.map,mapconfig:r.model.attributes.mapconfig}),r.mapLayerController=new l({view:r.view,map:r.view.map,model:r.model,mapconfig:r.model.attributes.mapconfig,controlsconfig:r.config.controls}),r.listenTo(r.view,"markers",function(e){r._registerMarkers(e),r.mapPanController.fitMarkerBounds(r.view.markerViews)}),r.view.render()}),e.when.apply(null,[r.model.init(),r.view.init()]).done(function(){r.$def.resolve(r)})},_registerMarkers:function(e){var r=this;o.forEach(e,function(e){r.listenTo(e.model,"active",function(o){r.mapPopupOpen(e.markerLayer);var n=r._getMarkerLayer(e.markerLayer,"getPopup");null!==n&&r.mapPanController.handlePopupPosition(n.getPopup())}),r.listenTo(e.model,"toggle",function(o){r.mapPopupToggle(e.markerLayer);var n=r._getMarkerLayer(e.markerLayer,"getPopup");null!==n&&r.mapPanController.handlePopupPosition(n.getPopup())}),r.listenTo(e,"click",function(o){r.mapPopupOpen(o),e.model.trigger("active",e.model)}),r.listenTo(e,"mouseover",function(e){r.view.map.hoverPopup&&(openpopup[popupid(mapMarker.getLatLng())]||mapMarker.openPopup())})})},_getMarkerLayer:function(e,r){var n,a;if(e instanceof L.LayerGroup){if(r in e)n=e;else for(a=e.getLayers();e=a.pop();)if(r in e){n=e;break}}else o.has(e,"originalEvent")&&(n=e.target);return n},mapPopupOpen:function(e){var o=this._getMarkerLayer(e,"openPopup");o&&o.openPopup()},mapPopupToggle:function(e){var o=this._getMarkerLayer(e,"togglePopup");o&&o.togglePopup()},mapPopupClose:function(e){var o=this._getMarkerLayer(e,"closePopup");o&&o.closePopup()}});return o.extend(s.prototype,i),s});
define("controllers/prototype",["underscore","backbone"],function(e,t){"use strict";var n=function(){this.cid=e.uniqueId("controller"),this.initialize.apply(this,arguments)};return n.extend=t.Router.extend,e.extend(n.prototype,t.Events),e.extend(n.prototype,{initialize:function(){throw new Error("unimplemented initialize()")}}),n});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject(r)}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl","text!xsl/cited-range.xsl","models/error/user","views/error/user"],function(e,t,n,o,r,s,i,l,a,c){"use strict";var d=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();try{var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t._mkGeojson(),t._mkCitedRange(),t.geojson?(t.set("placeType",t.geojson.properties.layer),t.$def.resolve(t)):t.$def.reject()}).fail(function(e){new c({model:new a({msg:"Error encountered handling xml file at '"+t.get("path")+"': "+e})}),t.$def.reject()})}catch(o){t.$def.reject(),new c({model:new a({msg:o.toString()})})}},defaults:{xml:null,placeType:null,iconUrl:"",citedRange:{}},geojson:null,getGeojson:function(){return null===this.geojson&&this._mkGeojson(),this.geojson},_mkGeojson:function(){var e=this;try{var t=this.xml2html(this.get("xml"),i,{},"text");this.geojson=JSON.parse(t)}catch(n){new c({model:new a({msg:"Failed to parse geojson generated from '"+e.get("path")+"': "+n.toString()})})}},_mkCitedRange:function(){try{var e=this.xml2html(this.get("xml"),l,{},"text");this.set("citedRange",JSON.parse(e))}catch(t){throw new Error("Failed to parse cited range json: "+t.toString())}}});return t.extend(d.prototype,o),t.extend(d.prototype,r),t.extend(d.prototype,s),d});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,n,i,r,o){"use strict";var c=n.Model.extend({initialize:function(n){var o=this;o.$def=e.Deferred();var c=n.config.articles.pathBase;c.match(/\/$/)||(c+="/");var a=n.config.articles.files,s=new r;o.config=n.config,o.set("collection",s);var f=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){f[t]=new i({articleid:t,articledir:c,path:c+e})});var l=t.map(f,function(e){return e.init()});e.when.apply(null,l).done(function(){s.add(f),o.setIcons(),o.$def.resolve(o)}).always(function(){t.forEach(l,function(e){"rejected"===e.state()&&o.$def.reject()}),o.$def.reject()})},setIcons:function(){var e=this,n=e.config.markers.icons,i=t.shuffle(t.flatten(t.map(n,function(e){return t.map(e.files,function(t){return e.dir.concat(t)})}))),r=i.pop(),o=[];e.get("collection").forEach(function(e,t){var n=e.getGeojson()||{properties:{}},c=n.properties.layer;o[c]=o[c]||i.pop()||r,e.set("iconUrl",o[c])})},getArticle:function(e){var t,n=this.get("collection");return"object"==typeof e?t=e:("number"==typeof e||"string"==typeof e)&&(t=n.at(e)),t}});return t.extend(c.prototype,o),c});
define("models/map",["jquery","underscore","backbone","mixins/asyncInit"],function(e,n,i,o){"use strict";var t=i.Model.extend({initialize:function(n){var i=this;i.$def=e.Deferred(),e.getJSON(n.config.map.config,function(e){i.set("mapconfig",e),i.$def.resolve(i)}).fail(function(e,n,o){console.log("Failed to load map config file: "+o),i.$def.reject()})},defaults:{mapconfig:{}}});return n.extend(t.prototype,o),t});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","controllers/issue","controllers/map","views/menu"],function(e,r,i,t,n,o,s,a,l){"use strict";var u=i.Router.extend({pages:{},config:{},issueController:null,mapController:null,initialize:function(e){var t=this;this.config=e.config,this.pages=e.config.pages,this.issueController=new s({router:this,config:this.config}),this.issueController.init().done(function(){r.has(t.pages.router,"history")&&t.pages.router.history&&i.history.start()})},navigate:function(e,r){i.history.fragment!==e&&i.history.navigate(e,r)},page:function(e){var i,t=this,n=!1;try{if(e||(e=this.pages.home),i=this.pages.pages[e],void 0===i)throw new Error("Missing config in router/page")}catch(s){return this.page("404")}(new o).render(),r.each(i,function(i){var o,s={config:t.config,issue:t.issueController.model,router:t},l=JSON.parse(JSON.stringify(i));if(r.has(l,"view"))o=l.view;else{if(!r.has(l,"partial")){if(r.has(confg,"full"))return void(window.location.href=l.full.page);throw new Error("Unsupported page type in router: "+e)}o="views/partial",l.partial.page=t.pages.pathBase+l.partial.page,s=r.extend(s,l.partial)}"views/map"===o?(t.mapController=new a(s),n=!0):require([o],function(e){var r=new e(s);r.render()})}),n||(t.mapController=null)},article:function(r){var i=this,t={config:i.config,issue:i.issueController.model,router:i};e("#titlepage").length>0&&e("#titlepage").remove(),e("#page").length>0&&e("#page").remove(),null===i.mapController&&(i.mapController=new a(t)),0===e("#menu").children().length&&new l(t).render(),i.mapController.init().done(function(){var e=i.issueController.model.getArticle(r);e.trigger("active",e)})}});return u});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","views/article/gallery","mixins/xml2html","text!xsl/article.xsl"],function(e,i,t,r,l,o){"use strict";var n=t.View.extend({id:"article",initialize:function(e){var i=this;i.config=e.config},render:function(){var i=this;if(i.$el=e("#"+i.id),0===i.$el.find("#"+i.model.cid).length){var t=this.xml2html(this.model.get("xml"),o,{"article-dir":i.config.articles.pathBase,iconUrl:i.model.get("iconUrl"),cid:i.model.cid});try{e(".article-content").remove(),e("#"+this.id).append(t)}catch(l){console.log("article load error: "+l.toString())}return e("img.slidesjs-slide").length>0?(new r).render():(e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer")),i.$el.find(".article-marker").click(function(e,t){i.model.trigger("toggle",i.model)}),i}},remove:function(){}});return i.extend(n.prototype,l),n});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,r){"use strict";var s=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.config=e.config},render:function(){this.$el.remove(),e("body").append(n)},renderArticle:function(e){new r({model:e,config:this.model.config,issue:this,router:this.model.router}).render()}});return s});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","views/marker","mixins/asyncInit","models/error/user","views/error/user"],function(e,i,n,a,r,t,o,m,s){"use strict";var p=n.View.extend({id:"map",tagName:"div",markerViews:[],mapconfig:{},initialize:function(n){var a=this;a.$def=e.Deferred(),a.model=n.model,a.issue=n.issue,e.when.apply({},[a.issue.init(),a.model.init()]).done(function(){if(a.mapconfig=a.model.get("mapconfig"),!(e("#"+this.id).length>0||e("#"+this.id).children().length>0))try{if(a._initMap(),!a.markerViews)throw"undefined marker views.";var n=i.map(a.markerViews,function(e){e.$def});e.when.apply({},n).done(function(){a.$def.resolve(a)})}catch(r){new s({model:new m({msg:r.toString()})})}})},_initMap:function(){var n=this;if(0===e("#"+this.id).length){if(e("body").append(r),n.map=new a.Map(n.mapconfig.id,n.mapconfig.map),n.mapconfig.view)try{n.map.setView(new a.LatLng(n.mapconfig.view.lat,n.mapconfig.view.lng),n.mapconfig.view.zoom)}catch(o){new s({model:new m({msg:"Leaflet reports bad data in map.json file. "+o.toString()})})}new a.TileLayer(n.mapconfig.tileLayer.url,n.mapconfig.tileLayer.opts).addTo(n.map),new a.control.scale(n.mapconfig.scale).addTo(n.map),n.markerViews=i.map(n.issue.get("collection").models,function(e){return new t({model:e,map:n.map,mapconfig:n.mapconfig})})}},render:function(){var e=this;e._initMap(),i.forEach(e.markerViews,function(e){e.render()}),e.trigger("markers",e.markerViews)}});return i.extend(p.prototype,o),p});
define("views/marker",["jquery","underscore","backbone","models/error/user","views/error/user","text!partials/marker.html","text!partials/marker-legend.html","mixins/asyncInit"],function(e,r,t,i,a,n,o,l){"use strict";var m=t.View.extend({template:r.template(n),el:"",markerLayer:null,map:null,mapconfig:null,initialize:function(r){var t=this;t.$def=e.Deferred(),t.map=r.map,t.mapconfig=r.mapconfig;try{if(t.initMarkerLayer(),!t.markerLayer)throw"Failed to initialize marker layer.";t.$def.resolve(t)}catch(n){new a({model:new i({msg:n.toString()})})}},initMarkerLayer:function(){var e=this,r=this.model.getGeojson(),t=e.mapconfig.features.icon;t.iconUrl=this.model.get("iconUrl")||"";var i=L.icon(t);e.markerLayer=L.geoJson(r,{onEachFeature:function(r,t){var i=L.popup(e.mapconfig.features.popup);i.setContent(e.template({articleid:e.model.get("articleid"),geojson:e.model.getGeojson()})),t.bindPopup(i),t.removeEventListener("click"),t.on("click",function(r){e.trigger("click",r)}),t.on("mouseover",function(r){e.trigger("mouseover",r)})},pointToLayer:function(r,t){return L.marker(t,{icon:i,clickable:!!r.properties.text,title:r.properties.markername||"",opacity:e.mapconfig.features.opacity,riseOnHover:e.mapconfig.features.riseOnHover})}})},render:function(){var e=this;try{if(!this.markerLayer){var r=e.model.get("path");throw"map marker layer is undefined for article '"+r+"'. Check lat/lng values in file."}this.markerLayer.addTo(this.map)}catch(t){new a({model:new i({msg:"Error adding marker layer: "+t.toString()})})}}});return r.extend(m.prototype,l),m});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="",f=[];"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),f=t.keys(u),f.sort(function(e,t){return e.localeCompare(t)}),t.each(f,function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("controllers/map/layer",["jquery","underscore","backbone","controllers/prototype","controllers/map/layer/placetype","controllers/map/layer/timeline"],function(e,r,o,n,t,i){"use strict";var a=n.extend({view:null,router:null,map:null,controlsconfig:null,initialize:function(e){var o=this;o.map=e.map,o.view=e.view,o.model=e.model,o.controlsconfig=e.controlsconfig,o.subControllers=[],r.has(o.controlsconfig,"placetype")&&o.controlsconfig.placetype.enable&&o.subControllers.push(new t({views:o.view.markerViews,map:o.view.map,mapconfig:o.model.attributes.mapconfig})),r.has(o.controlsconfig,"timeline")&&o.controlsconfig.timeline.enable&&o.subControllers.push(new i({markerViews:o.view.markerViews,map:o.view.map,siteconfig:o.model.attributes.config})),r.forEach(o.subControllers,function(e){o.listenTo(e,"filter",function(){o._updateMarkers()})})},_updateMarkers:function(){var e=this,o=[],n=[];r.forEach(e.subControllers,function(e){var o=e.getFilterState();n.push(o.hide),n=r.flatten(n)}),r.forEach(e.view.markerViews,function(e){var t=r.find(n,function(r){r===e.markerLayer});t||o.push(e.markerLayer)}),r.forEach(o,function(r){e.view.map.addLayer(r)}),r.forEach(n,function(r){e.view.map.removeLayer(r)})}});return a});
define("controllers/map/pan",["jquery","underscore","backbone","controllers/prototype","mixins/domwatcher"],function(t,e,n,o,i){"use strict";var a=o.extend({map:null,mapconfig:null,initialize:function(t){if(this.map=t.map,this.mapconfig=t.mapconfig,!this.map)throw new Error("Uninitialized map")},_fitMarkerBounds:function(t){var n=this,o=document.getElementById("article");if(o){var i=L.DomUtil.getViewportOffset(o).x,a=L.latLngBounds(e.map(t,function(t){var e=t.model.getGeojson().geometry.coordinates.slice(0);return L.latLng(e.reverse())}));0===i?n.map.fitBounds(a):i!=n.map.getSize().x?n.map.fitBounds(a,{paddingBottomRight:[document.body.clientWidth-i,0]}):n.map.fitBounds(a),n.map.invalidateSize()}},fitMarkerBounds:function(e){var n=this,o=t.Deferred();o.then(function(){n.mapconfig.view||n._fitMarkerBounds(e)}),this.watchDOM(1e3,"#article",o)},handlePopupPosition:function(e){var n,o,i,a,r,p=this,s=p.map,d=t(e.getContent()).attr("id");i=e.getLatLng(),void 0!==i&&(n=L.DomUtil.getViewportOffset(document.getElementById("article")).x,o=t("#"+d).closest(".leaflet-popup-content-wrapper").first(),r=L.point(e.options.autoPanPaddingBottomRight||e.options.autoPanPadding),r=r?r.x:0,a=o.length>0?o.offset().left+o.width()+r:0,0!=n&&a>n&&n!=s.getSize().x?s.panBy([a-n,0]):s.getBounds().contains(e.getLatLng())||(s.closePopup(e),s.openPopup(e)))}});return e.extend(a.prototype,i),a});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.msg)}});return s});
define("views/article/gallery",["jquery","underscore","backbone","views/article/gallery/popover","views/article/gallery/lightbox","views/article/gallery/slides"],function(e,i,r,n,l,a){"use strict";var o=r.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:i});var r=[];e("img.slidesjs-slide").each(function(i,n){var l=e.Deferred();e(n).load(function(){e(n).removeClass("remove"),l.resolve()}),e(n).error(function(){window.setTimeout(function(){l.reject()},500)}),r.push(l)}),e.when.apply({},r).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),(new n).render(),(new l).render(),(new a).render()})}});return o});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html&&this.$el.modal&&(this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0})),this}});return i});
define("controllers/map/layer/placetype",["jquery","underscore","backbone","controllers/prototype","models/error/user","views/error/user","text!partials/marker-legend.html"],function(e,r,o,t,n,l,a){"use strict";var i=t.extend({views:null,router:null,map:null,control:null,initialize:function(o){var t=this;t.views=o.views,t.map=o.map,t.mapconfig=o.mapconfig;var i=r.template(a),c=r.groupBy(t.views,function(e){return e.model.getGeojson().properties.layer}),s=t.control=L.control.layers(null,null,t.mapconfig.control.layers.options).addTo(t.map),u=s.getContainer();r.forEach(Object.keys(u),function(e){e.match("mouseover")&&u.removeEventListener("mouseover",u[e]),e.match("mouseout")&&u.removeEventListener("mouseout",u[e])}),L.DomEvent.on(e(".leaflet-control-layers-toggle")[0],"click",s._expand,s),r.each(r.keys(c),function(e){var o=e.replace(/\s+/g,"-"),t=i({iconUrl:c[e][0].model.get("iconUrl"),title:e,klass:o}),a=r.map(c[e],function(e){return e.markerLayer});try{var u=L.layerGroup(a);s.addOverlay(u,t)}catch(m){new l({model:new n({msg:m.toString()})})}}),e("input.leaflet-control-layers-selector").each(function(r,o){e(o).click()}),s.mapLayerController=t,s._onInputClick=t._onInputClick},getFilterState:function(){return{show:this.show||[],hide:this.hide||[]}},_onInputClick:function(){var e,r,o,t=this,n=[],l=[],a=t._form.getElementsByTagName("input"),i=a.length;for(t._handlingClick=!0,e=0;i>e;e++)r=a[e],o=t._layers[r.layerId],o.layer.getLayers().forEach(r.checked?function(e){n.push(e)}:function(e){l.push(e)});t._handlingClick=!1,t._refocusOnMap(),t.mapLayerController.show=n,t.mapLayerController.hide=l,t.mapLayerController.trigger("filter")}});return i});
define("controllers/map/layer/timeline",["jquery","underscore","backbone","controllers/prototype","views/map/layer/timeline","models/map/layer/timeline"],function(e,r,i,n,t,a){"use strict";var l=n.extend({map:null,model:null,view:null,siteconfig:null,markerViews:null,initialize:function(e){var r=this;r.views=e.views,r.map=e.map,r.markerViews=e.markerViews,r.model=new a({siteconfig:e.siteconfig,markerViews:e.markerViews}),r.view=new t({model:r.model,map:r.map,markerViews:e.markerViews}),r.listenTo(r.view,"filter",r._handleFilterEvent),r.view.render()},_handleFilterEvent:function(e){var i=this,n=[],t=[],a={};e.clear?n=r.map(i.markerViews,function(e){return e.markerLayer}):(n=r.map(e.selected,function(e){return a[e.markerView.model.cid]=void 0,e.markerView.markerLayer}),t=r.map(r.filter(i.markerViews,function(e){return!(e.model.cid in a)}),function(e){return e.markerLayer})),i.show=n,i.hide=t,i.trigger("filter")},getFilterState:function(){return{show:this.show||[],hide:this.hide||[]}}});return l});
define("models/map/layer/timeline",["jquery","underscore","backbone","collections/timeline","models/map/layer/timeline/item","mixins/asyncInit"],function(e,t,r,n,i,a){"use strict";var o=r.Model.extend({markerViews:null,start:null,end:null,siteconfig:null,bookconfig:null,initialize:function(t){var r=this;r.markerViews=t.markerViews,r.siteconfig=t.siteconfig,r.$def=e.Deferred(),e.getJSON(r.siteconfig.book.file,function(e){r.bookconfig=e.book,r._initialize(),r.$def.resolve(r)}).fail(function(e,t,n){r.$def.reject()})},_initialize:function(){var e=this,r=new n;e.set("collection",r),t.forEach(e.markerViews,function(n){var a=n.model,o=t.findWhere(e.bookconfig.chapters,{part:a.attributes.citedRange.part,chapter:a.attributes.citedRange.chapter});if(o){var c=o.paragraphs.start+a.attributes.citedRange.paragraph,s=c+1;r.add(new i({start:c,end:s,markerView:n}))}}),e.start=t.min(e.bookconfig.chapters,function(e){return e.paragraphs.start}).paragraphs.start,e.end=t.max(e.bookconfig.chapters,function(e){return e.paragraphs.end}).paragraphs.end},getItems:function(){return this.get("collection").models},tickValues:function(){var e=t.map(this.bookconfig.chapters,function(e){return e.paragraphs.start});return e.sort(function(e,t){return e-t}),e},tickFormat:function(e){var t,r,n=this;for(t=0;t<n.bookconfig.chapters.length;++t)if(r=n.bookconfig.chapters[t],e<=r.paragraphs.end)return e=r.chapter,e===n.bookconfig.chapters.length-1?"":e;return""}});return t.extend(o.prototype,a),o});
define("views/article/gallery/lightbox",["jquery","underscore","backbone","text!partials/lightbox-title.html","lightbox"],function(e,t,i,n){"use strict";var r=i.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=this;return e(".gallery-item").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:function(i){var r=i.el.attr("id"),l=e(".popover."+r),a=t.template(n),o=a({title:l.find(".head").text(),attr:l.find(".attr").text()});return o}}}),e(".glyphicon.glyphicon-expand").on("click",function(t){e(".gallery-item").magnificPopup("open")}),i}});return r});
define("views/article/gallery/popover",["jquery","underscore","backbone","text!partials/image-popover.html","text!partials/image-popover-content.html"],function(e,t,i,r,n){"use strict";var o=i.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=this,o=t.template(n);return e("img.slidesjs-slide").each(function(t,i){var n=i.getAttribute("id"),a=e(".popover."+n),c=a.find(".head").text();e(i).attr("alt",a.find(".desc").text());var l=o({attr:a.find(".attr").text()});e(i).popover({container:"body",html:!0,content:l,title:c,template:r,trigger:"hover",placement:"left"}),e(i).click(function(t){e(i).popover("hide")})}),i}});return o});
define("views/article/gallery/slides",["jquery","underscore","backbone","text!partials/image-popover.html","text!partials/image-popover-content.html","text!partials/lightbox-title.html","slidesjs","lightbox"],function(i,e,t,s,n,l){"use strict";var a=t.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var e=this;return i("#slides").slidesjs({navigation:{active:i("img.slidesjs-slide").length>1,effect:"fade"},pagination:{active:i("img.slidesjs-slide").length>1,effect:"fade"},effect:{fade:{speed:100,crossfade:!0}},callback:{loaded:function(e){var t=i(".slidesjs-control").children(":eq("+(e-1)+")");t.css({visibility:"hidden"}),t.css({height:"auto",width:"auto",maxHeight:i(".slidesjs-container").height(),maxWidth:i(".slidesjs-container").width(),position:"relative"}),t.css({left:(i(".slidesjs-container").width()-t.width())/2-parseInt(t.css("padding-left"),10),margin:0}),t.css({visibility:"visible"})},start:function(e){i(".slidesjs-control").children().css({visibility:"hidden"})},complete:function(e){var t=e-1,s=i(".slidesjs-control").children(":eq("+t+")");s.css({height:"auto",width:"auto",maxHeight:i(".slidesjs-container").height(),maxWidth:i(".slidesjs-container").width(),position:"relative"}),s.css({visibility:"visible"})}}}),e}});return a});
define("views/map/layer/timeline",["jquery","underscore","backbone","leaflet","text!partials/timeline.html","controls/L.Control.Timeline"],function(e,i,t,n,l){"use strict";var o=t.View.extend({id:"timeline",map:null,initialize:function(e){var i=this;i.map=e.map},_timelineCollapse:function(){var e=this;e._handleFilter({clear:!0})},_handleFilter:function(e){this.trigger("filter",e)},render:function(){var i,t,l,o,a=this;l=e("#map").height(),o=document.body.clientHeight,Math.abs(o/2-l)<2?(i="bottomright",t=e("#map").height()-100):(i="topleft",t=500),a.model.init().done(function(){a.timeline=n.control.timeline(a.map,a.model,{height:t,position:i,on:{brushend:function(e){a._handleFilter(e)}}}).addTo(a.map)})}});return o});
define("models/map/layer/timeline/item",["jquery","underscore","backbone"],function(e,n,t){"use strict";var r=t.Model.extend({markerView:null,start:null,end:null,initialize:function(e){var n=this;n.markerView=e.markerView,n.start=e.start,n.end=e.end},duration:function(){return this.end-this.start},compareTo:function(e){}});return r});
require.config({paths:{backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",bootstrap:"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min",d3:"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min",jquery:"//code.jquery.com/jquery-2.1.4.min",leaflet:"//unpkg.com/leaflet@0.7.3/dist/leaflet",lightbox:"//cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/jquery.magnific-popup.min",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]},lightbox:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","routes/router","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var i=e("#main").attr("data-config");i?e.getJSON(i,function(e){try{new a,new r({routes:e.pages.routes,config:e})}catch(i){e.debug||new o({model:new s({msg:i.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+i+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,